name: Build and Plan

on:
  # Gather Inputs and secrets
  workflow_call:
    inputs:
      apply:
        required: true
        type: string
      build:
        required: true
        type: string
      infra:
        required: true
        type: string
    secrets:
      OIDC_ROLE:
        required: true
      RDS_USERNAME:
        required: true
      RDS_PASSWORD:
        required: true
      AWS_ACCOUNT_ID:
        required: true

# For OIDC Role
permissions:
  id-token: write
  contents: read

jobs:
  SetEnvironment:
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{env.workspace}}
      environment: ${{env.branch}}
      backend: ${{env.backend}}
    steps:
      # Condition for setting Environment and backend based on the branch you have.
      - name: Use Condition
        run: |
          # have Space between bracket and condition  
          if  [ ${{github.ref_name}} == 'dev' ]  || [ ${{github.base_ref}} == 'dev' ] 
          then 
            echo "branch=dev" >> $GITHUB_ENV
            echo "workspace=default" >> $GITHUB_ENV
            echo "backend=dev.s3.tfbackend" >> $GITHUB_ENV

          elif  [ ${{github.ref_name}} == 'sandbox' ]  || [ ${{github.base_ref}} == 'sandbox' ]
          then 
              echo "branch=sandbox" >> $GITHUB_ENV
              echo "workspace=sandbox" >> $GITHUB_ENV
              echo "backend=sandbox.s3.tfbackend" >> $GITHUB_ENV
          else
              echo "branch=prod" >> $GITHUB_ENV
              echo "workspace=prod" >> $GITHUB_ENV
              echo "backend=prod.s3.tfbackend" >> $GITHUB_ENV
          fi

      - name: Print Branch
        run: echo ${{env.branch}} ${{env.workspace}}

# Build your Application Code
  Build:
    if: ${{inputs.build == 'true' }}
    needs: SetEnvironment
    environment: ${{needs.SetEnvironment.outputs.environment}}
    env:
      ECR_REPO: "${{needs.SetEnvironment.outputs.environment}}-repo"

    defaults:
      run:
        working-directory: ./auth

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      #     # - name: Install NPM
      #     #   run: sudo apt update && sudo apt install npm

      #     # - name: Install Packages
      #     #   run: npm install

      # Build Image to check if it's working.
      - name: Build image
        run: docker build -t ${{env.ECR_REPO}}-repo .

  Deploy:
    needs: [SetEnvironment, Build]
    # if: always() &&  ${{inputs.infra == 'true'}}
    # if: ${{ !failure() && !cancelled() && inputs.infra == 'true' }}
    # Condition for working only on push or pull request infra change.
    if: ${{always() && inputs.infra == 'true'}}

    environment: ${{needs.SetEnvironment.outputs.environment}}
    defaults:
      run:
        working-directory: ./Infrastructure
    runs-on: ubuntu-latest

    env:
      # Setting variables for terraform.
      TF_VAR_environment: ${{ needs.SetEnvironment.outputs.environment }}
      TF_VAR_tag: ${{github.sha}}
      ECR_REPO: "${{needs.SetEnvironment.outputs.environment}}-repo"
      TF_VAR_ecr_repo: "${{needs.SetEnvironment.outputs.environment}}-repo"
      TF_VAR_profile: "harsh"
      TF_VAR_region: "us-west-2"
      TF_VAR_account_id: ${{secrets.AWS_ACCOUNT_ID}}
      TF_VAR_username: ${{secrets.RDS_USERNAME}}
      TF_VAR_password: ${{secrets.RDS_PASSWORD}}
      workspace: ${{ needs.SetEnvironment.outputs.workspace }}
      backend: ${{needs.SetEnvironment.outputs.backend}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

        # using OIDC role.
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.OIDC_ROLE}}
          aws-region: us-west-2

      - name: Get Identity
        run: aws sts get-caller-identity

      - name: install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: initialize terraform
        run: terraform init -backend-config=$backend

        # Will give error if there's no repository
      - name: Check if there's an ECR already
        id: ECR
        continue-on-error: true
        run: aws ecr describe-repositories --repository-names $TF_VAR_ecr_repo

        # If failure then create repository
      - name: Create ECR
        if: ${{steps.ECR.outcome != 'success'}}
        run: aws ecr create-repository --repository-name $TF_VAR_ecr_repo --region $TF_VAR_region

        # Login to ECR and push the image to ECR.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: "${{needs.SetEnvironment.outputs.environment}}-repo"
          IMAGE_TAG: ${{github.sha}}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ../auth
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

        # Selecting workspace for managing multiple statefile.
      - name: Select workspace
        run: terraform workspace select $workspace

      - name: plan terraform
        run: terraform plan

      - name: Apply terraform
        if: ${{inputs.apply == 'true'}}
        run: terraform apply -auto-approve
