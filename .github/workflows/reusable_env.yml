name: Dev Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      workspace:
        required: true
        type: string
      backend:
        required: true
        type: string

    secrets:
      RDS_USERNAME:
        required: true
      RDS_PASSWORD:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      OIDC_ROLE:
         required: true

permissions:
  id-token: write
  contents: read

env:
  ECR_REPO: "${{inputs.environment}}-repo"
  TF_VAR_ecr_repo: "${{inputs.environment}}-repo"

jobs:
  path:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      infra: ${{ steps.filter.outputs.infra}}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'auth/**'
            infra:
              - 'Infrastructure/**'
              
# Passing Docker image to another job
  # Build:
  #   if: ${{ always() && ( needs.path.result == 'skipped' || needs.path.outputs.frontend == 'true' ) }}
  #   needs: path
  #   environment: ${{inputs.environment}}

  #   defaults:
  #     run:
  #       working-directory: ./auth

  #   runs-on: ubuntu-latest
  #   steps:

  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
        
  #     - name: Build and export
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./auth
  #         tags: containercruise:latest
  #         outputs: type=docker,dest=/tmp/containercruise.tar

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: containercruise
  #         path: /tmp/containercruise.tar


  Build:
    if: ${{ always() && ( needs.path.result == 'skipped' || needs.path.outputs.frontend == 'true' ) }}
    needs: path
    environment: ${{inputs.environment}}

    defaults:
      run:
        working-directory: ./Infrastructure

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: Build image
      #   run: make image_build name=${{env.ECR_REPO}} path="../auth"
        # run: docker build -t ${{env.ECR_REPO}}-repo .

  Deploy:
    needs: [Build, path]
    if: ${{ always() && ( needs.Build.result == 'success' && ( needs.path.result == 'skipped' || needs.path.outputs.infra == 'true' )) }}
    environment: ${{inputs.environment}}

    # defaults:
    #   run:
    #     working-directory: ./Infrastructure
    runs-on: ubuntu-latest

    env:
      TF_VAR_environment: ${{inputs.environment}}
      TF_VAR_tag: ${{github.sha}}
      # TF_VAR_profile: "harsh"
      TF_VAR_region: "us-west-2"
      TF_VAR_account_id: ${{secrets.AWS_ACCOUNT_ID}}
      # TF_VAR_username: ${{secrets.RDS_USERNAME}}
      # TF_VAR_password: ${{secrets.RDS_PASSWORD}}
      workspace: ${{inputs.workspace}}
      backend: ${{inputs.backend}} 

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name : Install Terraform 
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
      

        # For docker image
      # - name: Download artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: containercruise
      #     path: /tmp
          
      # - name: Load image
      #   run: |
      #     docker load --input /tmp/containercruise.tar
      #     docker image ls -a      

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{secrets.OIDC_ROLE}}
          aws-region: us-west-2

      - name: Get Identity
        run: aws sts get-caller-identity

        # Using SSM parameter to Set the Environment variables. 
        # REPLACE IT IF YOU WANT TO CHANGE ENV
      - name: Set variables with SSM parameter
      #   # run:  bash ../.github/workflows/ssm.sh
        run:  ssm_env=${{inputs.environment}} make ssm 

      - name: initialize terraform
        # working-directory: ../
        # run: terraform init -backend-config=${{inputs.environment}}.s3.tfbackend
        run: make init_backend backend=${{inputs.environment}}

      #   # Using Composite action for ECR.
      # - name: Check, Create & Login to ECR.
      #   id: login-ecr
      #   uses: ./.github/actions/ecr
      #   with:
      #     ecr : $TF_VAR_ecr_repo

      # - name: Check if there's an ECR already
      #   id: ECR
      #   continue-on-error: true
      #   run: aws ecr describe-repositories --repository-names $TF_VAR_ecr_repo

      # - name: Create ECR
      #   if: ${{steps.ECR.outcome != 'success'}}
      #   run: aws ecr create-repository --repository-name $TF_VAR_ecr_repo --region $TF_VAR_region

      - name: Create ECR
        run: make target resource=module.harshvardhan-repo

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{env.ECR_REPO}}
          IMAGE_TAG: ${{github.sha}}
        run: make docker name=$REGISTRY/$REPOSITORY:$IMAGE_TAG path="./auth"          
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG ../auth
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # - name: Select workspace
      #   run: terraform workspace select ${{inputs.workspace}}

      # - name: plan terraform
      #   run: terraform plan

      # - name: Apply terraform
      #   if: ${{github.event_name == 'push'}}
      #   run: terraform apply -auto-approve

      - name: Plan
        # working-directory: ../
        run: make Infra_Plan

      - name: Apply Terraform
        if: ${{github.event_name == 'push'}}
        run: make apply

      - name: Remove Terraform tfvars filter
        run: cd Infrastructure && rm terraform.tfvars